<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--导入属性配置-->
    <properties resource="jdbc.properties"/>
    <!-- 在MBG工作的时候，需要额外加载的依赖包 location属性指明加载jar/zip包的全路径 -->
    <!--<classPathEntry location="filePath" />-->
    <!-- context 是逆向工程的主要配置信息 id=当前配置唯一标识；targetRuntime=生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
    defaultModelType=指定生成对象的样式
        id:必选,上下文id,用于在生成错误时提示
        targetRuntime:
            1.MyBatis3:默认值,生成基于mybatis3.x以上版本的内容,包括XXXBySample;
            2.MyBatis3Simple:类似Mybatis3,只是不生成XXXBySample;
        defaultModelType:指定生成对象的样式
            1.conditional:类似hierarchical
            2.flat:所有内容(主键,blob)等全部生成在一个对象中
            3.hierarchical:主键生成一个XXKey对象(key class),Blob等单独生成一个对象,其他简单属性在一个对象中(record class)
    -->
    <context id="Mysql" targetRuntime="MyBatis3" defaultModelType="flat">
        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；一般保留默认值，遇到数据库关键字（Java关键字），
        使用columnOverride覆盖 -->
        <property name="autoDelimitKeywords" value="false"/>
        <!--配置生成文件的字符集编码-->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <!--<property name="beginningDelimiter" value="`"/>-->
        <!--<property name="endingDelimiter" value="`"/>-->
        <!-- tk-mybatis的注释和注解生成器 -->
        <property name="useMapperCommentGenerator" value="true"/>
        <!--mybatis-generator自动生成Mapper配置信息-->
        <!-- 无需自定义插件生成时采用此方式-->
        <!--<plugin type="tk.mybatis.mapper.generator.MapperPlugin">-->
        <!-- 自定义插件生成 -->
        <plugin type="org.hf.application.mybatis.tk.springboot.generator.CodeGenerator">
            <!-- 定义生成的通用Mapper继承的接口 -->
            <property name="mappers" value="tk.mybatis.mapper.common.Mapper"/>
            <!--区分大小写-->
            <property name="caseSensitive" value="true"/>
            <!--是否强制生成注解-->
            <property name="forceAnnotation" value="false"/>
            <!--采用Lombok的方式生成setter、getter方法-->
            <!--<property name="lombok"  value="Data"/>-->
            <property name="lombok"  value="Getter,Setter,ToString"/>
            <!--采用swagger生成对应的注解-->
            <!--<property name="swagger"  value="true"/>-->
        </plugin>
        <!-- 自动实现Serializable接口 -->
        <!--<plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>-->
        <!--生成mapper.xml时覆盖原文件-->
        <!--<plugin type="org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin"/>-->
        <!-- 注释生成器 不使用自带的注释生成器 -->
        <commentGenerator>
            <!-- 是否取消注释 不使用自带的注释生成器 -->
            <property name="suppressAllComments" value="true"/>
            <!-- 抑制警告 -->
            <property name="suppressTypeWarnings" value="true"/>
            <!-- 是否生成注释代时间戳 -->
            <property name="suppressDate" value="true"/>
        </commentGenerator>
        <!--加载数据库连接信息-->
        <jdbcConnection driverClass="${jdbc.driverClassName}" connectionURL="${jdbc.url}" userId="${jdbc.username}" password="${jdbc.password}">
            <!-- 防止生成其他库同名表 -->
            <property name="nullCatalogMeansCurrent" value="true"/>
        </jdbcConnection>
        <!-- java类型处理器 用于处理DB中的类型到Java中的类型,默认使用JavaTypeResolverDefaultImpl;
        注意: 默认会先尝试使用Integer,Long,Short等来对应Decimal和Numeric数据类型-->
        <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <!-- true: 使用BigDecimal对应Decimal和Numeric数据类型
                 false: 默认,
                    scale>0;length>18:使用BigDecimal;
                    scale=0;length[10,18]:使用Long;
                    scale=0;length[5,9]:使用Integer;
                    scale=0;length<5:使用Short;
            -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>
        <!--生成数据库表对应实体的包路径-->
        <javaModelGenerator targetPackage="org.hf.application.mybatis.tk.springboot.pojo.entity" targetProject="src/main/java">
            <!--如果包不存在创建一个 在targetPackage的基础上,根据数据库的schema再生成一层package,最终生成的类放在这个package下, 默认为false -->
            <property name="enableSubPackages" value="true"/>
            <!-- 设置是否在getter方法中,对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true"/>
            <!-- 生成的实体继承类 -->
            <property name="rootClass" value="org.hf.common.publi.pojo.entity.BaseEntity"/>
            <!-- MyBatis3/MyBatis3Simple 自动为每一个生成的类创建一个构造方法,构造方法包含了所有的field,而不是使用Setter方法 -->
            <property name="constructorBased" value="false"/>
            <!-- MyBatis3/MyBatis3Simple 是否创建一个不可以变的类,如果为true,就会创建一个没有Setter方法的类,取代的是类似constructorBased的类 -->
            <property name="immutable" value="false"/>
        </javaModelGenerator>
        <!--生成数据库表对应mapper.xml文件路径-->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <!--如果包不存在创建一个  -->
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>
        <!--生成数据库表对应通用mapper文件包路径-->
        <javaClientGenerator targetPackage="org.hf.application.mybatis.tk.springboot.mapper" targetProject="src/main/java" type="XMLMAPPER">
            <!--如果包不存在创建一个  -->
            <property name="enableSubPackages" value="true"/>
            <!-- mapper接口继承的父接口 -->
            <!--<property name="rootInterface" value=""/>-->
        </javaClientGenerator>
        <!--数据库表需要生成对应实体配置信息-->
        <!-- 选择一个table来生成相关文件,可以有一个或多个table,必须要有table元素,选择的table会生成一下文件:
            1.SQL map文件
            2.生成一个主键类:
            3.除了BLOB和主键的其他字段类
            4.包含BLOB的类
            5.一个用户生成动态查询的条件类(selectByExample, deleteByExample), 可选
            6.Mapper接口(可选)
        tableName(必要), 要生成对象的表名(多个表名用','分隔开):
        注意: 大小写敏感问题,正常情况下,会自动的去识别数据库标识符的大小写敏感度,在一般情况下,会根据设置的schema,catalog或者tablename去查询数据库表,按照下面的流程
            1.如果schema,catalog或tablename中有空格,那么设置的是什么格式,就精确的使用指定的大小写格式去查询
            2.否则,如果数据库的标识符使用大写,自动把表名变成大写再查询
            3.否则,如果数据库的标识符使用小写,自动把表名变成小写再查询
            4.否则,使用指定的大小写格式查询
        另外,如果在创建表的时候,使用""把数据库对象规定大小写,就算数据标识符是使用的大写,在这种情况下也会使用给定的大小写来创建表名,这个时候,请设置delimitIdentifiers="true"即可保留大小写格式:
        可选
            1.schema:数据库的schema
            2.catalog:数据库的catalog
            3.alias:为数据库表设置的别名,如果设置了alias,那么生成的所有的select SQL中,列名会变成alias_actualColumnName
            4.domainObjectName:生成的domain类的名字,如果不设置,直接使用表名作为domain类的名字,可以设置somepck.domainName,那么会自动把domainName类再放到somepck包里面
            5.enableInsert(默认值为true):指定是否生成insert语句
            6.enableSelectByPrimaryKey(默认值为true):是否生成按照主键查询对象的语句
            7.enableSelectByExample(默认值为true):MyBatis3Simple为false,指定是否生成动态查询语句
            8.enableUpdateByPrimaryKey(默认值为true):是否生成按照主键更新对象的语句
            9.enableUpdateByExample(默认值为true):MyBatis3Simple为false,指定是否生成动态更新语句
            10.enableDeleteByPrimaryKey(默认值为true):是否生成按照主键删除对象的语句
            11.enableDeleteByExample(默认值为true):MyBatis3Simple为false,指定是否生成动态删除语句
            12.enableCountByExample(默认值为true):MyBatis3Simple为false,指定是否生成动态查询总数语句
            13.modelType:参考context元素的defaultModelType,相当于覆盖
            14.delimitIdentifiers:参考tableName的解释,注意,默认的delimitIdentifiers是双引号,如果类似MySQL这样的数据库,使用的是反引号,那么还需要设置context的beginningDelimiter和enableDelimiter属性
            15.delimitAllColumns:设置是否所有生成的SQL中的列名都是用标识符引起来,默认为false,delimitIdentifiers参考context的属性
        注意: table里面很多参数都是对javaModelGenerator,context等元素的默认属性的一个复写
        -->
        <table tableName="user_info" domainObjectName="UserInfo" sqlProviderName="selectById" enableSelectByPrimaryKey="true"
               enableUpdateByPrimaryKey="false" enableDeleteByPrimaryKey="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false" enableInsert="false" enableCountByExample="false">
            <!--生成的字段名称跟数据库字段名保持一致，不是用驼峰命名-->
            <property name="useActualColumnNames" value="false"/>
            <!-- 需要插入时返回自增主键值, column值为主键字段 -->
            <generatedKey column="id" sqlStatement="MySql" identity="false"/>
        </table>
    </context>
</generatorConfiguration>
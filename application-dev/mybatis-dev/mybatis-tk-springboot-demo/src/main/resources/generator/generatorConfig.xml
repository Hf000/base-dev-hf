<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--导入属性配置-->
    <properties resource="jdbc.properties"/>
    <!-- 在MBG工作的时候，需要额外加载的依赖包 location属性指明加载jar/zip包的全路径 -->
    <!--<classPathEntry location="filePath" />-->
    <!-- context 是逆向工程的主要配置信息 id=当前配置唯一标识；targetRuntime=生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
    defaultModelType=指定生成对象的样式-->
    <context id="Mysql" targetRuntime="MyBatis3" defaultModelType="flat">
        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；一般保留默认值，遇到数据库关键字（Java关键字），
        使用columnOverride覆盖 -->
        <property name="autoDelimitKeywords" value="false"/>
        <!--配置生成文件的字符集编码-->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <!--<property name="beginningDelimiter" value="`"/>-->
        <!--<property name="endingDelimiter" value="`"/>-->
        <property name="useMapperCommentGenerator" value="true"/>
        <!--mybatis-generator自动生成Mapper配置信息-->
        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <!-- 定义生成的通用Mapper继承的接口 -->
            <property name="mappers" value="tk.mybatis.mapper.common.Mapper"/>
            <!--区分大小写-->
            <property name="caseSensitive" value="true"/>
            <!--是否强制生成注解-->
            <property name="forceAnnotation" value="false"/>
            <!--采用Lombok的方式生成setter、getter方法-->
            <property name="lombok"  value="Data"/>
            <!--采用swagger生成对应的注解-->
            <!--<property name="swagger"  value="true"/>-->
        </plugin>
        <!--加载数据库连接信息-->
        <jdbcConnection driverClass="${jdbc.driverClassName}" connectionURL="${jdbc.url}" userId="${jdbc.username}" password="${jdbc.password}" />
        <!--生成数据库表对应实体的包路径-->
        <javaModelGenerator targetPackage="org.hf.application.mybatis.tk.springboot.pojo.entity" targetProject="src/main/java">
            <!--如果包不存在创建一个  -->
            <property name="enableSubPackages" value="true"/>
            <!--生成字符串类型去除空格-->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>
        <!--生成数据库表对应mapper.xml文件路径-->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <!--如果包不存在创建一个  -->
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>
        <!--生成数据库表对应通用mapper文件包路径-->
        <javaClientGenerator targetPackage="org.hf.application.mybatis.tk.springboot.mapper" targetProject="src/main/java" type="XMLMAPPER">
            <!--如果包不存在创建一个  -->
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>
        <!--数据库表需要生成对应实体配置信息-->
        <table tableName="tb_user" domainObjectName="User" enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false" enableInsert="false">
            <!--生成的字段名称跟数据库字段名保持一致，不适用驼峰命名-->
            <property name="useActualColumnNames" value="true"/>
            <!--相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性-->
            <!--<generatedKey column="id" sqlStatement="JDBC" />-->
        </table>
    </context>
</generatorConfiguration>